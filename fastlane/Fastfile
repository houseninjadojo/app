opt_out_usage

# load dotenv
dotenv_vault

# fastlane_require 'pry'
# binding.pry

# helpers

def build_version_code(version, build_number)
  code = version.split('.').map{ |c| c.rjust(3, '0') }.join
  code.to_i.to_s + build_number.rjust(2, '0')
end

def root_dir
  if ENV['CI'] && File.directory?(ENV['GITHUB_WORKSPACE'])
    ENV['GITHUB_WORKSPACE']
  else
    File.expand_path('..')
  end
end

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# app_store_key_id        = ENV['APPSTORE_KEY_ID']
# app_store_issuer_id     = ENV['APPSTORE_ISSUER_ID']
# app_store_key_content   = ENV['APPSTORE_PRIVATE_KEY'].to_s
app_store_api_key       = ENV['APP_STORE_API_KEY']&.gsub("\\\n", '\n')
apple_team_id           = ENV['APPLE_TEAM_ID']
build_number            = '1'
bundle_identifier       = 'co.houseninja.application'
gh_user                 = 'mileszim'
gh_pat                  = ENV['GHCR_PAT']
git_basic_authorization = Base64.strict_encode64("#{gh_user}:#{gh_pat}")
provision_profile_name  = 'match AppStore co.houseninja.application'
scheme                  = 'HouseNinja'
sentry_auth_token       = ENV['SENTRY_AUTH_TOKEN']
sentry_deploy_name      = 'testflight'
sentry_env              = 'sandbox'
sentry_org_slug         = 'houseninja'
sentry_project_slug     = 'app'
xcode_project_path      = 'ios/App/App.xcodeproj'
xcode_workspace         = 'ios/App/App.xcworkspace'
buildcache_xcargs       = "CC='clang' CPLUSPLUS='clang++' LD='clang' LDPLUSPLUS='clang++' CODE_SIGN_STYLE=Manual DEVELOPMENT_TEAM="

# get version
package      = load_json(json_path: 'package.json')
version      = package['version']
# full_version = "#{bundle_identifier}@#{version}"

# android
android_full_dir    = "#{root_dir}/android"
android_project_dir = 'android'
gradle_path         = 'android/app/build.gradle'
keystore_path       = "#{android_full_dir}/houseninja.keystore"
version_code        = build_version_code(version, build_number)
json_key_data_raw   = ENV['PLAY_STORE_CREDENTIALS']

default_platform(:ios)

platform :android do
  desc 'Build app'
  lane :build do
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: android_project_dir,
      # gradle_path: gradle_path,
      print_command: true,
      properties: {
        'android.injected.signing.store.file' => keystore_path,
        'android.injected.signing.store.password' => ENV['ANDROID_KEYSTORE_PASSWORD'],
        'android.injected.signing.key.alias' => ENV['ANDROID_KEY_NAME'],
        'android.injected.signing.key.password' => ENV['ANDROID_KEY_PASSWORD']
      }
    )
  end

  desc 'Upload to Play Store'
  lane :upload do |options|
    upload_to_play_store(
      track: options[:track] || 'internal',
      track_promote_to: options[:track_promote_to] || 'production',
      json_key_data: json_key_data_raw.gsub("\\\\n", "\\n"),
      release_status: options[:release_status] || 'draft',
      # rollout: options[:rollout] || '1',
      changes_not_sent_for_review: false,
    )
  end

  desc 'Release Internal'
  lane :internal do
    increment_version
    build
    upload(track: 'internal', release_status: 'draft')
  end

  desc 'Release'
  lane :release do
    increment_version
    build
    upload(
      track: 'production',
      release_status: 'completed'
    )
  end

  lane :increment_version do
    android_set_version_name(
      version_name: version,
      gradle_file: gradle_path
    )
    android_set_version_code(
      version_code: version_code,
      gradle_file: gradle_path
    )
  end
end

platform :ios do
  desc 'build app'
  lane :build do
    xcargs = ENV['CI'] ? buildcache_xcargs : nil
    build_app(
      scheme: scheme,
      workspace: xcode_workspace,
      xcargs: xcargs,
    )
  end

  desc 'upload to testflight'
  lane :upload do |options|
    upload_to_testflight(
      api_key: options[:api_key],
      skip_waiting_for_build_processing: true,
      notify_external_testers: false,
      app_identifier: bundle_identifier,
    )
  end

  desc 'Sandbox Release'
  lane :sandbox do
    # initialize_sentry
    # start_time = Time.now.to_i
    setup_ci if ENV['CI']
    api_key = fetch_api_key
    sign_code(api_key: api_key)
    # increment_version
    build
    # end_time = Time.now.to_i
    upload(api_key: api_key)
    # finalize_sentry(start_time: start_time, end_time: end_time)
  end

  private_lane :fetch_api_key do
    # api_key = app_store_connect_api_key(
    #   key_id: app_store_key_id,
    #   issuer_id: app_store_issuer_id,
    #   key_content: app_store_key_content,
    #   is_key_content_base64: false,
    #   duration: 1200,  # optional (maximum 1200)
    #   in_house: false, # optional but may be required if using match/sigh
    # )
    # api_key = app_store_connect_api_key(ENV["APP_STORE"]
    # api_key
    JSON.parse(app_store_api_key)
  end

  private_lane :sign_code do |options|
    sync_code_signing(
      api_key: options[:api_key],
      type: 'appstore',
      app_identifier: bundle_identifier,
      readonly: true,
      git_basic_authorization: git_basic_authorization,
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: xcode_project_path,
      team_id: apple_team_id,
      bundle_identifier: bundle_identifier,
      profile_name: provision_profile_name,
    )
  end

  private_lane :increment_version do
    increment_version_number_in_xcodeproj(
      version_number: version,
      xcodeproj: xcode_project_path,
      scheme: scheme,
    )
  end

  private_lane :initialize_sentry do
    sentry_create_release(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      version: version,
      build: build_number,
      app_identifier: bundle_identifier,
      # Whether to finalize the release. If not provided or false,
      # the release can be finalized using the sentry_finalize_release action
      # finalize: true
    )
  end

  private_lane :finalize_sentry do |options|
    sentry_upload_dif(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      path: 'ios/App',
    )
    sentry_create_deploy(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      version: version,
      build: build_number,
      app_identifier: bundle_identifier,
      env: sentry_env,
      name: sentry_deploy_name,
      started: options[:start_time],
      finished: options[:end_time], # Optional unix timestamp when the deployment finished
    )
  end
end
