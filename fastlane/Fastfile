opt_out_usage

fastlane_require 'dotenv'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

app_store_key_id        = ENV["APPSTORE_KEY_ID"]
app_store_issuer_id     = ENV["APPSTORE_ISSUER_ID"]
app_store_key_content   = "#{ENV["APPSTORE_PRIVATE_KEY"]}".gsub('\n', '\\n')
apple_team_id           = ENV["APPLE_TEAM_ID"]
build_number            = "1"
bundle_identifier       = "co.houseninja.application"
gh_user                 = "mileszim"
gh_pat                  = ENV["GHCR_PAT"]
git_basic_authorization = Base64.strict_encode64("#{gh_user}:#{gh_pat}")
provision_profile_name  = "match AppStore co.houseninja.application"
scheme                  = "HouseNinja"
sentry_auth_token       = ENV["SENTRY_AUTH_TOKEN"]
sentry_deploy_name      = "testflight"
sentry_env              = "sandbox"
sentry_org_slug         = "houseninja"
sentry_project_slug     = "app"
xcode_project_path      = "ios/App/App.xcodeproj"
xcode_workspace         = "ios/App/App.xcworkspace"

# get version
package      = load_json(json_path: "package.json")
version      = package["version"]
full_version = "#{bundle_identifier}@#{version}"

# android
android_project_dir = "android"
# gradle_path         = "android"

default_platform(:ios)

platform :android do
  desc "Build app"
  lane :build do
    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: android_project_dir,
      # gradle_path: gradle_path,
      print_command: true,
    )
  end
end

platform :ios do
  desc "build app"
  lane :build do
    build_app(
      scheme: scheme,
      workspace: xcode_workspace,
    )
  end

  desc "upload to testflight"
  lane :upload do |options|
    upload_to_testflight(
      api_key: options[:api_key],
      skip_waiting_for_build_processing: true,
      notify_external_testers: false,
      app_identifier: bundle_identifier,
    )
  end

  desc "Sandbox Release"
  lane :sandbox do
    initialize_sentry
    start_time = Time.now.to_i
    setup_ci if ENV["CI"]
    api_key = fetch_api_key
    sign_code(api_key: api_key)
    increment_version
    build
    end_time = Time.now.to_i
    upload(api_key: api_key)
    finalize_sentry(start_time: start_time, end_time: end_time)
  end

  private_lane :fetch_api_key do
    api_key = app_store_connect_api_key(
      key_id: app_store_key_id,
      issuer_id: app_store_issuer_id,
      key_content: app_store_key_content,
      is_key_content_base64: true,
      duration: 1200,  # optional (maximum 1200)
      in_house: false, # optional but may be required if using match/sigh
    )
    api_key
  end

  private_lane :sign_code do |options|
    sync_code_signing(
      api_key: options[:api_key],
      type: "appstore",
      app_identifier: bundle_identifier,
      readonly: false,
      git_basic_authorization: git_basic_authorization,
    )
    update_code_signing_settings(
      use_automatic_signing: false,
      path: xcode_project_path,
      team_id: apple_team_id,
      bundle_identifier: bundle_identifier,
      profile_name: provision_profile_name,
    )
  end

  private_lane :increment_version do
    increment_version_number_in_xcodeproj(
      version_number: version,
      xcodeproj: xcode_project_path,
      scheme: scheme,
    )
  end

  private_lane :initialize_sentry do
    sentry_create_release(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      version: version,
      build: build_number,
      app_identifier: bundle_identifier,
      # finalize: true # Whether to finalize the release. If not provided or false, the release can be finalized using the sentry_finalize_release action
    )
  end

  private_lane :finalize_sentry do |options|
    sentry_upload_dif(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      path: "ios/App",
    )
    sentry_create_deploy(
      auth_token: sentry_auth_token,
      org_slug: sentry_org_slug,
      project_slug: sentry_project_slug,
      version: version,
      build: build_number,
      app_identifier: bundle_identifier,
      env: sentry_env,
      name: sentry_deploy_name,
      started: options[:start_time],
      finished: options[:end_time], # Optional unix timestamp when the deployment finished
    )
  end
end
